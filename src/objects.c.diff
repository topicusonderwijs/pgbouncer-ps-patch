diff --git a/src/objects.c b/src/objects.c
index b9b970a..6f9b326 100644
--- a/src/objects.c
+++ b/src/objects.c
@@ -60,6 +60,10 @@ struct Slab *peer_pool_cache;
 struct Slab *pool_cache;
 struct Slab *user_cache;
 struct Slab *iobuf_cache;
+struct Slab *server_ps_cache;
+struct Slab *client_ps_cache;
+struct Slab *client_ps_query_cache;
+struct Slab *client_ps_param_cache;
 
 /*
  * libevent may still report events when event_del()
@@ -92,6 +96,8 @@ static void construct_client(void *obj)
 	list_init(&client->head);
 	sbuf_init(&client->sbuf, client_proto);
 	client->state = CL_FREE;
+
+	ps_client_socket_state_init(&client->ps_state);
 }
 
 static void construct_server(void *obj)
@@ -102,6 +108,8 @@ static void construct_server(void *obj)
 	list_init(&server->head);
 	sbuf_init(&server->sbuf, server_proto);
 	server->state = SV_FREE;
+
+	ps_server_socket_state_init(&server->ps_state);
 }
 
 /* compare string with PgUser->name, for usage with btree */
@@ -146,6 +154,12 @@ void init_caches(void)
 	server_cache = slab_create("server_cache", sizeof(PgSocket), 0, construct_server, USUAL_ALLOC);
 	client_cache = slab_create("client_cache", sizeof(PgSocket), 0, construct_client, USUAL_ALLOC);
 	iobuf_cache = slab_create("iobuf_cache", IOBUF_SIZE, 0, do_iobuf_reset, USUAL_ALLOC);
+
+	ps_init();
+	server_ps_cache = slab_create("server_ps_cache", sizeof(PgServerPreparedStatement), 0, construct_server_ps, USUAL_ALLOC);
+	client_ps_cache = slab_create("client_ps_cache", sizeof(PgParsedPreparedStatement), 0, construct_client_ps, USUAL_ALLOC);
+	client_ps_query_cache = slab_create("client_ps_query_cache", sizeof(PgQueryExtent), 0, construct_query_extent, USUAL_ALLOC);
+	client_ps_param_cache = slab_create("client_ps_param_cache", sizeof(PgParamDataTypeList), 0, construct_param_list, USUAL_ALLOC);
 }
 
 /* state change means moving between lists */
@@ -191,6 +205,7 @@ void change_client_state(PgSocket *client, SocketState newstate)
 	switch (client->state) {
 	case CL_FREE:
 		varcache_clean(&client->vars);
+		ps_client_free(client);
 		slab_free(client_cache, client);
 		break;
 	case CL_JUSTFREE:
@@ -261,6 +276,7 @@ void change_server_state(PgSocket *server, SocketState newstate)
 	switch (server->state) {
 	case SV_FREE:
 		varcache_clean(&server->vars);
+		ps_server_free(server);
 		slab_free(server_cache, server);
 		break;
 	case SV_JUSTFREE:
@@ -451,6 +467,7 @@ PgUser *add_user(const char *name, const char *passwd)
 
 		aatree_insert(&user_tree, (uintptr_t)user->name, &user->tree_node);
 		user->pool_mode = POOL_INHERIT;
+		user->prepared_statement_cache_queries = -1;
 	}
 	safe_strcpy(user->passwd, passwd, sizeof(user->passwd));
 	return user;
@@ -476,6 +493,7 @@ PgUser *add_db_user(PgDatabase *db, const char *name, const char *passwd)
 
 		aatree_insert(&db->user_tree, (uintptr_t)user->name, &user->tree_node);
 		user->pool_mode = POOL_INHERIT;
+		user->prepared_statement_cache_queries = -1;
 	}
 	safe_strcpy(user->passwd, passwd, sizeof(user->passwd));
 	return user;
@@ -501,6 +519,7 @@ PgUser *add_pam_user(const char *name, const char *passwd)
 
 		aatree_insert(&pam_user_tree, (uintptr_t)user->name, &user->tree_node);
 		user->pool_mode = POOL_INHERIT;
+		user->prepared_statement_cache_queries = -1;
 	}
 	if (passwd)
 		safe_strcpy(user->passwd, passwd, sizeof(user->passwd));
@@ -518,6 +537,7 @@ PgUser *force_user(PgDatabase *db, const char *name, const char *passwd)
 		list_init(&user->head);
 		list_init(&user->pool_list);
 		user->pool_mode = POOL_INHERIT;
+		user->prepared_statement_cache_queries = -1;
 	}
 	safe_strcpy(user->name, name, sizeof(user->name));
 	safe_strcpy(user->passwd, passwd, sizeof(user->passwd));
@@ -2197,6 +2217,15 @@ void objects_cleanup(void)
 	memset(&user_tree, 0, sizeof user_tree);
 	memset(&autodatabase_idle_list, 0, sizeof autodatabase_idle_list);
 
+	slab_destroy(client_ps_param_cache);
+	client_ps_param_cache = NULL;
+	slab_destroy(client_ps_query_cache);
+	client_ps_query_cache = NULL;
+	slab_destroy(client_ps_cache);
+	client_ps_cache = NULL;
+	slab_destroy(server_ps_cache);
+	server_ps_cache = NULL;
+
 	slab_destroy(server_cache);
 	server_cache = NULL;
 	slab_destroy(client_cache);
