diff --git a/src/server.c b/src/server.c
index 74f170d..87009a3 100644
--- a/src/server.c
+++ b/src/server.c
@@ -225,6 +225,15 @@ int pool_res_pool_size(PgPool *pool)
 		return pool->db->res_pool_size;
 }
 
+int pool_prepared_statement_cache_queries(PgPool *pool)
+{
+	if (pool->user->prepared_statement_cache_queries >= 0)
+		return pool->user->prepared_statement_cache_queries;
+	if (pool->db->prepared_statement_cache_queries >= 0)
+		return pool->db->prepared_statement_cache_queries;
+	return cf_prepared_statement_cache_queries;
+}
+
 int database_max_connections(PgDatabase *db)
 {
 	if (db->max_db_connections <= 0)
@@ -250,6 +259,9 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 	SBuf *sbuf = &server->sbuf;
 	PgSocket *client = server->link;
 	bool async_response = false;
+	struct List *oppl;
+	struct OutstandingParsePacket *opp = NULL;
+	bool ignore_packet = false;
 
 	Assert(!server->pool->db->admin);
 
@@ -346,13 +358,27 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 		break;
 	/* chat packets */
 	case '2':		/* BindComplete */
+		break;
 	case '3':		/* CloseComplete */
+		ignore_packet = true;
+		// FIXME: only skip our S close statements, portal closes???
+		break;
 	case 'c':		/* CopyDone(F/B) */
 	case 'f':		/* CopyFail(F/B) */
 	case 'I':		/* EmptyQueryResponse == CommandComplete */
 	case 'V':		/* FunctionCallResponse */
 	case 'n':		/* NoData */
+		break;
 	case '1':		/* ParseComplete */
+		if (is_prepared_statements_enabled(server->pool)) {
+			oppl = list_pop(&server->ps_state.server_outstanding_parse_packets);
+			if (oppl) {
+				opp = container_of(oppl, struct OutstandingParsePacket, node);
+				ignore_packet = opp->ignore;
+				free(opp);
+			}
+		}
+		break;
 	case 's':		/* PortalSuspended */
 
 	/* data packets, there will be more coming */
@@ -372,6 +398,9 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 	} else if (client) {
 		if (client->state == CL_LOGIN) {
 			return handle_auth_query_response(client, pkt);
+		} else if (ignore_packet) {
+			slog_noise(server, "not forwarding packet with type '%c' from server", pkt->type);
+			sbuf_prepare_skip(sbuf, pkt->len);
 		} else {
 			sbuf_prepare_send(sbuf, &client->sbuf, pkt->len);
 
